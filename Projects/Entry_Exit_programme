# Read the sorted data file
f = open('sorted_data.txt', 'r')

# Initialize the dictionaries
student_records = {}

# Process each line in the file
for line in f:
    # Strip and split the line
    l = line.strip()
    l1 = l.split(",")

    # Get the details
    student_name = l1[0]
    crossing_type = l1[1]
    gate_number = l1[2]
    time = l1[3]

    # Initialize the nested dictionary if the student is not already in the records
    if student_name not in student_records:
        student_records[student_name] = {
            'crossing_type': [],
            'gate_number': [],
            'time': []
        }
    
    # Append the current record to the student's records
    student_records[student_name]['crossing_type'].append(crossing_type)
    student_records[student_name]['gate_number'].append(gate_number)
    student_records[student_name]['time'].append(time)

f.close()

# Query functions
def query1(student_name, current_time):
    # Check if the student exists in the records
    if student_name in student_records:
        records = list(zip(student_records[student_name]['crossing_type'], 
                           student_records[student_name]['gate_number'], 
                           student_records[student_name]['time']))

        # Determine if the student is currently in the campus
        last_crossing = student_records[student_name]['crossing_type'][-1]
        currently_in_campus = last_crossing == 'ENTER'

        # Write the output to a file
        with open('query1_output.txt', 'w') as f:
            for record in records:
                f.write(f"{student_name}, {record[0]}, {record[1]}, {record[2]}\n")
            f.write(f"Currently in campus: {'YES' if currently_in_campus else 'NO'}\n")
        
        print(f"Records written to query1_output.txt. Currently in campus: {'YES' if currently_in_campus else 'NO'}")
    else:
        print("Student not found.")

def query2(start_time, end_time):
    entered_during_period = []
    exited_during_period = []

    for student, records in student_records.items():
        for crossing_type, time in zip(records['crossing_type'], records['time']):
            if start_time <= time <= end_time:
                if crossing_type == 'ENTER':
                    entered_during_period.append(f"{student}, {crossing_type}, {time}")
                elif crossing_type == 'EXIT':
                    exited_during_period.append(f"{student}, {crossing_type}, {time}")

    # Write the output to a file
    with open('query2_output.txt', 'w') as f:
        f.write("Entered during period:\n")
        for entry in entered_during_period:
            f.write(entry + '\n')
        f.write("Exited during period:\n")
        for exit in exited_during_period:
            f.write(exit + '\n')
    
    print("Records written to query2_output.txt.")

def query3(gate_number):
    enter_count = 0
    exit_count = 0

    for records in student_records.values():
        for crossing_type, gate in zip(records['crossing_type'], records['gate_number']):
            if gate == gate_number:
                if crossing_type == 'ENTER':
                    enter_count += 1
                elif crossing_type == 'EXIT':
                    exit_count += 1

    print(f"Gate {gate_number}: ENTER count = {enter_count}, EXIT count = {exit_count}")

# Main loop for querying
while True:
    print('Select option (1 to 3), or press Enter to exit:')
    option = input('Enter option: ')
    if option == '1':
        student_name = input('Enter student name: ')
        current_time = input('Enter current time: ')
        query1(student_name, current_time)
    elif option == '2':
        start_time = input('Enter start time: ')
        end_time = input('Enter end time: ')
        query2(start_time, end_time)
    elif option == '3':
        gate_number = input('Enter gate number: ')
        query3(gate_number)
    elif option == '':
        break
    else:
        print('Wrong input. Please try again.')
